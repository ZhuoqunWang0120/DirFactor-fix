row.names(glmnet.res[[3]]$beta)
lapply( glmnet.res, function(x) row.names(x$beta)[x$beta>0])
row.names(x$beta)
lapply( glmnet.res, function(x) row.names(x$beta) )
lapply( glmnet.res, function(x) row.names(x$beta)[x$beta[,1]>0] )
glmnet.res[[7]]$beta
lapply( glmnet.res, function(x) row.names(x$beta)[!x$beta[,1]==0] )
sapply( glmnet.res, function(x) sort(abs(x$beta),decreasing = T)[10] )
lapply( glmnet.res, function(x) sort(abs(x$beta),decreasing = T)[10] )
lapply( glmnet.res, function(x) row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]] )
sig.gene = lapply( glmnet.res, function(x) row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]] )
sig.gene
res.chemicals = read.csv("~/Desktop/data/toxicogenomics_chemicals.csv")
res.chemicals
res.chemicals$gene_id
res.chemicals$chemical_name
row.names(res.chemicals) = res.chemicals$gene_id
res.chemicals = read.csv("~/Desktop/data/toxicogenomics_chemicals.csv")
lambda.sel$cvm
lambda.sel$cvsd
lambda.sel$cvup
?cv.glmnet
glmnet.cv.res = vector(mode ="list", length=length(unique(tcga.metadata$organ)))
glmnet.cv.res = vector(mode ="list", length=length(unique(tcga.metadata$organ)))
i = 1
for( organ in unique(tcga.metadata$organ)){
print(organ)
if(organ == "Brain"){
x.use = combined.data[,combined.metadata$organ==organ&combined.metadata$tissue==0]
y.use = combined.metadata$disease[combined.metadata$organ==organ&combined.metadata$tissue==0]
}else{
x.use = combined.data[,combined.metadata$organ==organ]
y.use = combined.metadata$disease[combined.metadata$organ==organ]
}
limma.res = read.csv(paste("~/Dropbox (Huttenhower Lab)/Datathon_Shared/result/limma/",organ,".csv",sep=""))
limma.p.adj = adjp(limma.res$p.value.diseasecancer)
gene.list = as.character(limma.res$X[limma.p.adj[,2]<0.05])
x.use = x.use[gene.list,]
count.res[[i]] = c(nrow(limma.res),length(gene.list))
x.use[is.na(x.use)] = min(x.use,na.rm=T)
lambda.sel = cv.glmnet( y=y.use, x=t(x.use),
family = "binomial", alpha = 0.5 )
# glm.final = glmnet( y=y.use, x=t(x.use),
family = "binomial", alpha = 0.5, lambda = lambda.sel$lambda.min )
# glmnet.res[[i]] = glm.final
glmnet.cv.res[[i]] = lambda.sel
# forest.res = randomForest( x = t(x.use), y = y.use )
i = i+1
}
i = 1
for( organ in unique(tcga.metadata$organ)){
print(organ)
if(organ == "Brain"){
x.use = combined.data[,combined.metadata$organ==organ&combined.metadata$tissue==0]
y.use = combined.metadata$disease[combined.metadata$organ==organ&combined.metadata$tissue==0]
}else{
x.use = combined.data[,combined.metadata$organ==organ]
y.use = combined.metadata$disease[combined.metadata$organ==organ]
}
limma.res = read.csv(paste("~/Dropbox (Huttenhower Lab)/Datathon_Shared/result/limma/",organ,".csv",sep=""))
limma.p.adj = adjp(limma.res$p.value.diseasecancer)
gene.list = as.character(limma.res$X[limma.p.adj[,2]<0.05])
x.use = x.use[gene.list,]
count.res[[i]] = c(nrow(limma.res),length(gene.list))
x.use[is.na(x.use)] = min(x.use,na.rm=T)
lambda.sel = cv.glmnet( y=y.use, x=t(x.use),
family = "binomial", alpha = 0.5 )
# glm.final = glmnet( y=y.use, x=t(x.use),
# family = "binomial", alpha = 0.5, lambda = lambda.sel$lambda.min )
# glmnet.res[[i]] = glm.final
glmnet.cv.res[[i]] = lambda.sel
# forest.res = randomForest( x = t(x.use), y = y.use )
i = i+1
}
glmnet.cv.res[[1]]$lambda.1se
glmnet.cv.res[[1]]$lambda.min
glmnet.cv.res[[1]]$lambda
sig.gene = lapply( glmnet.res, function(x){
genes = row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
chemicals = lapply( genes, function(x) )}
)
genes = row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
genes}
)
sig.gene = lapply( glmnet.res, function(x){
genes = row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
genes}
)
sig.gene
sapply( glmnet.cv.res, function(x){
x$cvm[x$lambda==x$lambda.min]
})
round(sapply( glmnet.cv.res, function(x){
x$cvm[x$lambda==x$lambda.min]
}),2)
round(sapply( glmnet.cv.res, function(x){
x$cvm[x$lambda==x$lambda.min]
}),5)
cbind(as.character(unique(tcga.metadata$organ)),round(sapply( glmnet.cv.res, function(x){
x$cvm[x$lambda==x$lambda.min]
}),5))
image = cor(combined.data)
source("~/Dropbox (Huttenhower Lab)/fixed effect factor analysis/src/mcmc_sim.R")
gg.heatmap(image)
p1 = gg.heatmap(image[1:500,1:500])
p1
image = cor(combined.data)
p1 = gg.heatmap(image[1:250,1:250])
p1
image
image = cor(t(combined.data))
p1 = gg.heatmap(image)
p1
image
image = cor(t(combined.data), na.rm = T)
sig.gene = lapply( glmnet.res, function(x){
genes = row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
lapply(genes, function(x) res.chemicals$chemical_name[res.chemicals$gene_id==x])
}
)
sig.gene
sig.gene = lapply( glmnet.res, function(x){
genes = row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
sapply(genes, function(x) res.chemicals$chemical_name[res.chemicals$gene_id==x])
}
)
sig.gene
sig.gene[[1]]
res.chemicals = read.csv("~/Desktop/data/toxicogenomics_chemicals.csv")
sig.gene = lapply( glmnet.res, function(x){
genes = row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
sapply(genes, function(x) res.chemicals$chemical_name[res.chemicals$gene_id==x])
}
)
x = glmnet.res[[1]]
genes = row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
abs(x$beta)
order(abs(x$beta),decreasing = T)
order(abs(x$beta),decreasing = T)[1:10]
row.names(x$beta)
row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
x = genes[1]
res.chemicals$chemical_name[res.chemicals$gene_id==x]
as.character(res.chemicals$gene_id)==x
sig.gene = lapply( glmnet.res, function(x){
genes = row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
sapply(genes, function(x) as.character(res.chemicals$chemical_name)[as.character(res.chemicals$gene_id)==x])
}
sig.gene = lapply( glmnet.res, function(x){
genes = row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
sapply(genes, function(x) as.character(res.chemicals$chemical_name)[as.character(res.chemicals$gene_id)==x])
}
)
sig.gene = lapply( glmnet.res, function(x){
genes = row.names(x$beta)[order(abs(x$beta),decreasing = T)[1:10]]
sapply(genes, function(x) as.character(res.chemicals$chemical_name)[as.character(res.chemicals$gene_id)==x])
}
)
sig.gene
db.res.full = lapply( paste("~/Research/diabimmune/db_full_med_full/sim", seq(20049,99999,50), sep = "_"),
function(x){
res = readRDS(x)
res} )
setwd("~/Dropbox (Huttenhower Lab)/fixed effect factor analysis/diabimmune/spline_sim")
source("mcmc_helper.R")
source("../../src/mcmc_sim.R")
library( MASS )
library( truncnorm )
library( mvtnorm )
library( MCMCpack )
library( mvtnorm )
library( tmvtnorm )
spe.corr.all = lapply( db.res.full, function(x)
cov2cor((x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)%*%t(x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)) )
raw.data = read.csv("../../data/diabimmune/diabimmune_genus.txt", sep = "\t", row.names = 1 )
load( "../../data/diabimmune/DIABIMMUNE_Karelia_metadata_full.RData" )
metadata.wgs = metadata[(!is.na(metadata$mgx_reads_filtered))&(!is.na(metadata$gid_wgs)),]
row.names(metadata.wgs) = metadata.wgs$gid_wgs
use.data = raw.data[,names(raw.data)%in%row.names(metadata.wgs)]
metadata.use = metadata.wgs[names(use.data),]
use.data.count = t(round(t(use.data/100)*metadata.use$mgx_reads_filtered*1e6))
use.data.count = use.data.count[,!is.na(metadata.use$seroconverted)]
metadata.use = metadata.use[!is.na(metadata.use$seroconverted),]
spe.corr.all = lapply( db.res.full, function(x)
cov2cor((x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)%*%t(x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)) )
get.dbdata.ready = function( use.data.count, metadata.use, idx, use.formula ){
metadata.spline = metadata.use[idx,]
db.sub.mt = t(model.matrix(~subjectID-1,data=metadata.spline))
age.raw = metadata.spline$age_at_collection
age.stand = (metadata.spline$age_at_collection-mean(metadata.spline$age_at_collection))/sd(metadata.spline$age_at_collection)
metadata.spline$age.stand = age.stand
db.design.linear.mt = t(model.matrix(use.formula, data=metadata.spline))
use.data.spline = use.data.count[,idx]
use.data.spline= use.data.spline[rowMeans(use.data.spline>0)>0.1,]
use.data.spline.norm = t(t(use.data.spline)/colSums(use.data.spline))
all.names = sapply( row.names(use.data.spline), function(x) gsub("[kpcofg]__", "", strsplit(x,split="|",fixed=T)[[1]] ) )
return( list( sub.mt = db.sub.mt, design.mt = db.design.linear.mt,
data.mt = use.data.spline, data.mt.norm = use.data.spline.norm,
raw.metadata = metadata.spline, all.taxa = all.names ) )
}
data.full = get.dbdata.ready( use.data.count, metadata.use, 1:ncol(use.data.count),
~country+age.stand+seroconverted+age.stand*country )
get.mcmc.start = function( data.all ){
hyper = list( nv = 30, a.er = 1, b.er = 0.3, a1 = 10, a2 = 20, m = 10, sub.design = data.all$sub.mt )
start = list( er = 1/rgamma( 1, shape = hyper$a.er, rate = hyper$b.er ),
sigma = sample( sigma.value, size = nrow(data.all$data.mt), replace = T, prob = sigma.prior ),
T.aug = rgamma( ncol(data.all$data.mt), 10, 1 ),
Q = matrix( 0.5, nrow = nrow(data.all$data.mt), ncol = ncol(data.all$data.mt) ),
X = matrix( rnorm( hyper$m*nrow(data.all$data.mt) ), nrow = hyper$m ),
Y.sub = matrix( 0, nrow = hyper$m, ncol = nrow(hyper$sub.design) ),
delta = c( rgamma( 1, shape = hyper$a1, rate = 1 ), rgamma( hyper$m-1, shape = hyper$a2, rate = 1 ) ),
phi = matrix( rgamma( hyper$m*nrow(hyper$sub.design), shape = 3/2, rate = 3/2 ), nrow = nrow(hyper$sub.design) ),
y = data.all$design.mt,
x = matrix( rnorm( nrow(data.all$data.mt)*nrow(data.all$design.mt) ), nrow=nrow(data.all$design.mt) ),
d = rgamma( nrow(data.all$design.mt), 1, 1 ) )
return( list( hyper = hyper, start = start ) )
}
spe.corr.all = lapply( db.res.full, function(x)
cov2cor((x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)%*%t(x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)) )
data.full$sub.mt
spe.corr.sub = spe.corr.all[sample(1:length(spe.corr.all),800,replace = T)]
spe.dist.sub = lapply( spe.corr.all, function(x) 1-x )
spe.corr.mean = apply( ListtoArray(spe.corr.all), 1:2, mean )
spe.corr.raw = cor( t( data.full$data.mt.norm ) )
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
cor(t(t(x$x)%*%diag(x$d)%*%data.full$design.mt+t(x$X)%*%x$Y.sub%*%data.full$sub.mt))) ), 1:2, mean )
gg.heatmap(spe.corr.fix)
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
cov2cor((x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)%*%t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)), 1:2, mean )
#cor(t(t(x$x)%*%diag(x$d)%*%data.full$design.mt+t(x$X)%*%x$Y.sub%*%data.full$sub.mt))) ), 1:2, mean )
# dendrogram
genus.names = data.full$all.taxa[6,]
library( phyloseq )
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
cov2cor((x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)%*%t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
gg.heatmap(spe.corr.fix)
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
cor((x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
cor(t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
gg.heatmap(spe.corr.fix)
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
cor(t(x$Q)))), 1:2, mean )
gg.heatmap(spe.corr.fix)
gg.heatmap(spe.corr.mean)
gg.heatmap(spe.corr.fix)
genus.names = data.full$all.taxa[6,]
library( phyloseq )
genus.tree = read_tree("../../data/genus_tree.tre.txt")
genus.tree.label = genus.tree$tip.label
genus.name.rematched = sapply( genus.names, function(x){
idx = grep( paste("_",x,sep=""), genus.tree.label, ignore.case = T )
genus.tree.label[idx[1]] } )
genus.name.nomatch = genus.name.rematched[is.na( genus.name.rematched )]
genus.otu.table = diag( length(genus.tree$tip.label) )
row.names(genus.otu.table) = genus.tree.label
colnames(genus.otu.table) = genus.tree.label
phyloseq.otu = otu_table( genus.otu.table, taxa_are_rows = T )
phyloseq.genus = phyloseq( phyloseq.otu )
phyloseq.genus = merge_phyloseq( phyloseq.genus, genus.tree )
phyloseq.final = prune_taxa( genus.name.rematched[!is.na(genus.name.rematched)],
phyloseq.genus )
phyloseq.final = prune_samples( sample_sums(phyloseq.final)>0, phyloseq.final )
phylo.dist = UniFrac( phyloseq.final, weighted = F )
phylo.dendro = hclust( phylo.dist )
phylo.dendro$labels = sapply( phylo.dendro$labels, function(x) strsplit(x,"_")[[1]][2] )
phylo.sim = cov2cor((cmdscale(phylo.dist,k=43,eig = T)$points%*%t(tmp$points)))
phylo.sim = cov2cor((phylo.ord$points%*%t(phylo.ord$points)))
phylo.ord = cmdscale(phylo.dist,k=43,eig = T)
phylo.sim = cov2cor((phylo.ord$points%*%t(phylo.ord$points)))
dendro.labels.ordered = phylo.dendro$labels[phylo.dendro$order]
dendro.labels.ordered
row.names(spe.corr.mean) = genus.names
colnames(spe.corr.mean) = genus.names
plot.genus.corr.mean = spe.corr.mean[dendro.labels.ordered,dendro.labels.ordered]
row.names(spe.corr.raw) = genus.names
colnames(spe.corr.raw) = genus.names
plot.genus.corr.raw = spe.corr.raw[dendro.labels.ordered,dendro.labels.ordered]
row.names(spe.corr.fix) = genus.names
colnames(spe.corr.fix) = genus.names
plot.genus.corr.fix = spe.corr.raw[dendro.labels.ordered,dendro.labels.ordered]
gg.heatmap(plot.genus.corr.mean)
plot.genus.corr.mean[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.raw[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.mean)
gg.heatmap(plot.genus.corr.raw)
gg.heatmap(plot.genus.corr.fix)
gg.heatmap(phylo.sim)
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
#cor(t(x$Q)))), 1:2, mean )
#cor(t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
#cov2cor((x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)%*%t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
cor(t(t(x$x)%*%diag(x$d)%*%data.full$design.mt+t(x$X)%*%x$Y.sub%*%data.full$sub.mt))) ), 1:2, mean )
row.names(spe.corr.fix) = genus.names
colnames(spe.corr.fix) = genus.names
plot.genus.corr.fix = spe.corr.raw[dendro.labels.ordered,dendro.labels.ordered]
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.fix)
row.names(spe.corr.fix) = genus.names
colnames(spe.corr.fix) = genus.names
plot.genus.corr.fix = spe.corr.fix[dendro.labels.ordered,dendro.labels.ordered]
plot.genus.corr.mean[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.raw[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.mean)
gg.heatmap(plot.genus.corr.raw)
gg.heatmap(plot.genus.corr.fix)
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
cor(t(x$Q)))), 1:2, mean )
row.names(spe.corr.fix) = genus.names
colnames(spe.corr.fix) = genus.names
plot.genus.corr.fix = spe.corr.fix[dendro.labels.ordered,dendro.labels.ordered]
gg.heatmap(plot.genus.corr.fix)
plot.genus.corr.mean[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.raw[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.mean)
gg.heatmap(plot.genus.corr.raw)
gg.heatmap(plot.genus.corr.fix)
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
#cor(t(x$Q)))), 1:2, mean )
cor(t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
spe.corr.fix
row.names(spe.corr.fix) = genus.names
colnames(spe.corr.fix) = genus.names
plot.genus.corr.fix = spe.corr.fix[dendro.labels.ordered,dendro.labels.ordered]
plot.genus.corr.mean[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.raw[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.mean)
gg.heatmap(plot.genus.corr.raw)
gg.heatmap(plot.genus.corr.fix)
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
#cor(t(x$Q)))), 1:2, mean )
#cor(t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
cov2cor((x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)%*%t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
row.names(spe.corr.fix) = genus.names
colnames(spe.corr.fix) = genus.names
plot.genus.corr.fix = spe.corr.fix[dendro.labels.ordered,dendro.labels.ordered]
plot.genus.corr.mean[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.raw[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.mean)
gg.heatmap(plot.genus.corr.raw)
gg.heatmap(plot.genus.corr.fix)
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
#cor(t(x$Q)))), 1:2, mean )
#cor(t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
#cov2cor((x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)%*%t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
cor(t(t(x$x)%*%diag(x$d)%*%data.full$design.mt+t(x$X)%*%x$Y.sub%*%data.full$sub.mt))) ), 1:2, mean )
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.mean)
gg.heatmap(plot.genus.corr.raw)
gg.heatmap(plot.genus.corr.fix)
row.names(spe.corr.fix) = genus.names
colnames(spe.corr.fix) = genus.names
plot.genus.corr.fix = spe.corr.fix[dendro.labels.ordered,dendro.labels.ordered]
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.mean)
gg.heatmap(plot.genus.corr.raw)
gg.heatmap(plot.genus.corr.fix)
gg.heatmap(plot.genus.corr.mean)
spe.corr.all = lapply( db.res.full, function(x)
cor(t(x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)) )
spe.corr.mean = apply( ListtoArray(spe.corr.all), 1:2, mean )
row.names(spe.corr.fix) = genus.names
colnames(spe.corr.fix) = genus.names
row.names(spe.corr.mean) = genus.names
colnames(spe.corr.mean) = genus.names
plot.genus.corr.mean = spe.corr.mean[dendro.labels.ordered,dendro.labels.ordered]
row.names(spe.corr.raw) = genus.names
colnames(spe.corr.raw) = genus.names
plot.genus.corr.raw = spe.corr.raw[dendro.labels.ordered,dendro.labels.ordered]
row.names(spe.corr.fix) = genus.names
colnames(spe.corr.fix) = genus.names
plot.genus.corr.fix = spe.corr.fix[dendro.labels.ordered,dendro.labels.ordered]
plot.genus.corr.mean[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.raw[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.mean)
spe.corr.all = lapply( db.res.full, function(x)
cor(x$X)
#cor(t(x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)) )
#cov2cor((x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)%*%t(x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)) )
spe.corr.mean = apply( ListtoArray(spe.corr.all), 1:2, mean )
spe.corr.sub = spe.corr.all[sample(1:length(spe.corr.all),800,replace = T)]
spe.dist.sub = lapply( spe.corr.all, function(x) 1-x )
spe.corr.raw = cor( t( data.full$data.mt.norm ) )
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
#cor(t(x$Q)))), 1:2, mean )
#cor(t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
#cov2cor((x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)%*%t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
cor(t(t(x$x)%*%diag(x$d)%*%data.full$design.mt+t(x$X)%*%x$Y.sub%*%data.full$sub.mt))) ), 1:2, mean )
spe.corr.all = lapply( db.res.full, function(x)
cor(x$X) )
spe.corr.all
spe.corr.mean = apply( ListtoArray(spe.corr.all), 1:2, mean )
row.names(spe.corr.mean) = genus.names
colnames(spe.corr.mean) = genus.names
plot.genus.corr.mean = spe.corr.mean[dendro.labels.ordered,dendro.labels.ordered]
plot.genus.corr.mean[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.raw[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.mean)
spe.corr.all = lapply( db.res.full, function(x)
cov2cor(t(x$X)%*%(x$X))
#cor(x$X) )
#cor(t(x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)) )
#cov2cor((x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)%*%t(x$Q-t(x$x)%*%diag(x$d)%*%data.full$design.mt)) )
spe.corr.mean = apply( ListtoArray(spe.corr.all), 1:2, mean )
spe.corr.sub = spe.corr.all[sample(1:length(spe.corr.all),800,replace = T)]
spe.dist.sub = lapply( spe.corr.all, function(x) 1-x )
spe.corr.raw = cor( t( data.full$data.mt.norm ) )
spe.corr.fix = apply( ListtoArray(lapply(db.res.full, function(x)
#cor(t(x$Q)))), 1:2, mean )
#cor(t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
#cov2cor((x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)%*%t(x$Q-t(x$X)%*%x$Y.sub%*%data.full$sub.mt)))), 1:2, mean )
cor(t(t(x$x)%*%diag(x$d)%*%data.full$design.mt+t(x$X)%*%x$Y.sub%*%data.full$sub.mt))) ), 1:2, mean )
spe.corr.all = lapply( db.res.full, function(x)
cov2cor(t(x$X)%*%(x$X)) )
spe.corr.mean = apply( ListtoArray(spe.corr.all), 1:2, mean )
row.names(spe.corr.mean) = genus.names
colnames(spe.corr.mean) = genus.names
plot.genus.corr.mean = spe.corr.mean[dendro.labels.ordered,dendro.labels.ordered]
row.names(spe.corr.raw) = genus.names
colnames(spe.corr.raw) = genus.names
plot.genus.corr.raw = spe.corr.raw[dendro.labels.ordered,dendro.labels.ordered]
row.names(spe.corr.fix) = genus.names
colnames(spe.corr.fix) = genus.names
plot.genus.corr.fix = spe.corr.fix[dendro.labels.ordered,dendro.labels.ordered]
plot.genus.corr.mean[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.raw[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
plot.genus.corr.fix[lower.tri(plot.genus.corr.mean)] = phylo.sim[lower.tri(plot.genus.corr.mean)]
gg.heatmap(plot.genus.corr.mean)
source("mcmc_helper.R")
source("../../src/mcmc_sim.R")
source("mcmc_helper.R")
source("../../src/mcmc_sim.R")
multiplot(p1,p2,p3,cols=3)
p1 = gg.heatmap(plot.genus.corr.mean)
p2 = gg.heatmap(plot.genus.corr.raw)
p3 = gg.heatmap(plot.genus.corr.fix)
multiplot(p1,p2,p3,cols=3)
set.seed(1)
rnorm(10)
tmvtnorm::rtmvnorm
setwd("~/Research/package_submission/DirFactor-fix/R")
n = 300
source("MCMC.R")
n = 300
n.sub = 50
p = 100
Y.sub = matrix( rnorm( n.sub*4 ), nrow = 4 )
Y.sub[1:2, (n.sub/2+1):n.sub] = 0
Y.sub[3:4, 1:(n.sub/2)] = 0
X = matrix( rnorm( p*4 ), nrow = 4 )
subject.id = data.frame( id=as.factor(rep(1:n.sub, each = n/n.sub)) )#data.frame( id = as.factor(sample( rep(1:50, each = 6), size = 300, replace = F )) )
sub.design = t(model.matrix( ~.-1, subject.id ))
y.raw = data.frame( ysmall = rnorm(n), ylarge = rnorm(n,sd = 10), y2 = rep( sample(0:1,n.sub,replace = T), each = n/n.sub ) )
y.fix = t(model.matrix( ~ysmall+y2, data = y.raw) )
y.fix.large = t(model.matrix( ~ylarge+y2-1, data = y.raw) )
y.fix.inter = t(model.matrix( ~ysmall+y2+ysmall*y2-1, data = y.raw) )
y.fix.inter.large = t(model.matrix( ~ylarge+y2+ylarge*y2-1, data = y.raw))
v.fix = rbind( rnorm(p), c(rep( 5, 8 ), rep( -5, 8 ), rep(0,p-16)), c(rep(5,4), rep(-5,4), rep(5,4), rep(-5,4), rep(0,p-16)) )
v.fix.inter = rbind( c(rep( 5, 8 ), rep( -5, 8 ), rep(0,p-16)), c(rep(5,4), rep(-5,4), rep(5,4), rep(-5,4), rep(0,p-16)),
c( rep(c(10,-5,-5,-10),2), rep(c(-10,5,5,10),2), rep(0,p-16) ) )
v.fix.inter.small = rbind( c(rep( 1, 8 ), rep( -1, 8 ), rep(0,p-16)), c(rep(1,4), rep(-1,4), rep(1,4), rep(-1,4), rep(0,p-16)),
c( rep(c(2,0,-1,-2),2), rep(c(-2,0,1,2),2), rep(0,p-16) ) )
hyper = list( nv = 30, a.er = 1, b.er = 0.3, a1 = 10, a2 = 20, m = 10,
sub.design = sub.design,
y.fix = y.fix.inter,
alpha = 10, beta = 0 )
sigma.value = seq(0.001,0.999,0.001)
tmp = c(0,pbeta( sigma.value, 10/68, 1/2-10/68 ))
sigma.prior = sapply( 1:999, function(x) tmp[x+1]-tmp[x] )
sigma.prior[length(sigma.prior)] = sigma.prior[length(sigma.prior)] + 1-sum(sigma.prior)
sigma = sample( sigma.value, p, replace = T, prob = sigma.prior )
Q = t(X)%*%Y.sub%*%sub.design + t(v.fix.inter)%*%y.fix.inter + matrix( rnorm( n*p ), nrow = p )
weight = sigma.normal*Q^2*(Q>0)
sigma.normal = rbeta( p, 1/2, 1 )
Q = t(X)%*%Y.sub%*%sub.design + t(v.fix.inter)%*%y.fix.inter + matrix( rnorm( n*p ), nrow = p )
weight = sigma.normal*Q^2*(Q>0)
data = apply( weight, 2, function(x) rmultinom( 1, 1e5, x ) )
test = DirFactor.fix( data, hyper )
source("MCMC.R")
test = DirFactor.fix( data, hyper )
source("MCMC.R")
test = DirFactor.fix( data, hyper )
source("MCMC.R")
test = DirFactor.fix( data, hyper )
source("MCMC.R")
test = DirFactor.fix( data, hyper )
source("MCMC.R")
source("MCMC.R")
test = DirFactor.fix( data, hyper )
test = DirFactor.fix( data, hyper, step = 1e2 )
source("MCMC.R")
test = DirFactor.fix( data, hyper, step = 1e2 )
test$save.path
tmp = read.csv("/private/var/folders/n1/q055hxqj61s_54c4g9lgvsg80000gn/T/RtmpcHZyeL/sim_100")
tmp$X
tmp = readRDS("/private/var/folders/n1/q055hxqj61s_54c4g9lgvsg80000gn/T/RtmpcHZyeL/sim_100")
tmp$sigma
tmp$Q
tmp$x
source("MCMC.R")
source("MCMC.R")
test = DirFactor.fix( data, hyper, step = 1e2 )
source("MCMC.R")
test = DirFactor.fix( data, hyper, step = 1e2 )
sub.design
